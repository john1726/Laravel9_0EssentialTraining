Laravel 9.0 Essential Training (see https://www.linkedin.com/learning/laravel-9-0-essential-training/why-laravel?autoplay=true&contextUrn=urn%3Ali%3AlyndaLearningPath%3A5df00060498ec7589c054544&u=103738058): Why Laravel?
Selecting transcript lines in this section will navigate to timestamp in the video
- [Shruti] Laravel is an open-source web framework, one of the most popular among PHP developer currently. You can develop robust, scalable, and secure full-stack web applications with Laravel faster than ever. If you're a PHP developer willing to take your career to the next level, this course is for you. We will start by setting up your development environment, go through the basic concepts of Laravel, and then learn more by building a simple yet fully-functional web application using the framework. By the end of the course, you will have a strong foundation in Laravel. Hi, I'm Shruti Balasa, a full stack developer and tech educator. I have worked with Laravel for three years and PHP itself for more than a decade now. I'm passionate about teaching, and my students say that my courses are simple, practical, and easy to follow. Join me in this course, and let's together build something awesome while learning the fundamentals of Laravel 9.0.

Laravel 9.0 Essential Training: Introduction: Prerequisites for this course:
- [Instructor] Before you proceed with this course, you should have a good understanding of HTML and have worked with Core PHP before. You should also be familiar with object-oriented concepts and have some basic knowledge of databases. It's also nice to have a basic understanding of HTTP requests, but not an absolute requirement. If you know the concepts of MVC architecture, short for model view controller, you will be able to pick up lateral concepts much faster, but even this is not an absolute requirement. Apart from these knowledge requirements, I recommend having a dedicated computer or a laptop with a good internet connection to practice and build your own project while you follow along the course. If you're all set, let's get started.

Laravel 9.0 Essential Training: Introduction: Understand the MVC architecture: 
- [Instructor] Lateral framework is largely based on the MVC architecture. MVC is a way of building a huge application by splitting it into three parts, models, views, and controllers. This makes maintaining the application easy as it grows and avoids repetition of code, along with a few other benefits. The model contains all the logic related to the application's data, like the schemas, the databases, and their fields. This is the part where you write the code to interact with the database. The view contains the user interface. All the components that the user sees on the webpage and interacts with are included in the views. The controller is what connects the model and the view. It handles all the interactions between these two components. So in simpler words, the user interacts with the webpage, which is the view. The controller takes the user's input from the view, uses some logic to translate that input into a request for the model. The model then grabs the data from the database, and the controller passes this data from the model back to the view for the user to see. Once you have this basic concept in mind, during the course, you will better understand why a specific block of code is added in a particular file and not elsewhere. Now let's go ahead and set up our development environment.

Laravel 9.0 Essential Training: Introduction: Using the exercise files for this course:
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] All the code that you see me write throughout the course is available in this GitHub repository. The repository is organized such that each branch here is associated with a video in the course. For example, the 02_03 branch has the code that you will see in chapter two, video three. But notice that each of these numbers have two branches named with an ending letter b and e. Now, that's the beginning and ending state of each video. If you're watching chapter two, video three, the branch named 02_03b contains the code the way it is at the beginning of that video. The code in the end of the video is in the branch 02_03e. This repository is mostly for reference and you might need only if you get stuck in between or if you wish to skip the first few videos and start from somewhere in the middle. You can use this repository in two ways. First, don't learn this repository to begin with. Simply follow along the course and at the end of any video, if you feel your code doesn't work as expected and you need to refer to my code, you can view the files right here in the browser. Let's say you just watched chapter four, video two, go to the branch named 04_02e, which is here. If you want to refer to the file within the routes directory named web.php, you can view the code and compare it with yours, copy it if needed and continue with the course once you've fixed it. Second option is to have this entire code, all the branches working in your system as a reference project so at any point, you can simply use git checkout to switch to a certain branch and see how it works. For that, the steps are listed in the README file of this repository. Look at the steps under Installing. You first need to have Docker installed and if you're using Windows, you also need to have WSL2. I cover both of these in chapter one. So after completing chapter one, you can clone this repository, scroll up. Under the Code tab, copy this link. Open terminal, type git clone, paste the link of the repository you just copied, space, give any name of the project. You can call it reference final. Whatever you wish. Run this command and follow the rest of the steps listed here from step number three. You will be able to understand all of these better once you finish watching all the videos in chapter one.

Laravel 9.0 Essential Training: Introduction: 1) Installation and Setup: Choose the right tool:
- There are a variety of options available for developing and running a lot project on your computer depending on your operating system. Let's explore three of the most popular options. First option is to use a local Apache server. Second one is to use the Homestead Vagrant box and third is using Docker and Sail. If you are using macOS or Linux, you might already have an Apache server installed or it's just one command of it After that, you need to install PHP, Composer and MySQL or a similar database server. With Windows, however, you need to install a XAMPP or a WAMP server all of these. This first option is quite a long process and you might run into multiple issues. Laravel Homestead is an official prepackaged Vagrant Box that provides you a development environment without requiring you to install PHP web server and any other server software on your local machine. This runs on any OS, but you need a virtual box which takes up a proportionately large amount of system resources. Sail is a built in solution provided by Laravel that uses Docker. For this, we only need to install Docker. Even without any knowledge of Docker, Sail is fairly easy to get started with. It's also now the official way of installing Laravel specified in the documentation. You can refer the documentation here and hence we will be using Sail for the development of our Laravel project. Apart from the options just mentioned, we also have a couple of operating system specific tools that are quite popular among developers. Laravel Valet which is available only on macOS and Laragon, which is available on Windows. You are free to explore any of these options and choose the right tool that suits you. But, if you want to stay on the same page throughout the course, follow along with the next couple of videos that demonstrate the installation of Laravel with Sail on Mac and Windows.

Laravel 9.0 Essential Training: Introduction: 1) Installation and Setup: Prerequisites for Windows OS:
- [Instructor] We need to complete some steps on Windows before installing Docker. So skip this video if you're not using Windows operating system. To use Docker on Windows, you need to enable WSL, Windows Subsystem for Linux. This allows you to run Linux programs natively on Windows. If you are using Windows 10, version 2004 or higher with build 19,041 or higher, you can install WSL too with a single command. I'll show you how to do that in this video. However, if you have an older version, you can follow the steps from this link on the Microsoft website. Now, open command prompt as administrator, type, wsl --install, run this command. This will take a long time to install WSL. And once it's done, you might be prompted to restart your system. After restart, Ubuntu two will start installing on its own. This takes a long time as well. You will then be asked to create a new user on Ubuntu. Type in a new username and a new password and create a new user. It's recommended to install Windows terminal. I already have this installed, so let me open it. Windows terminal open. Now that is installed. You may be able to see this option 'Ubuntu' when you click on the arrow mark here. Open Ubuntu, By default, your present working directory is this. Don't ever put your projects within this directory. Switch to home directory with command cd ~ . Let me clear all the screen. Create a new folder projects within this. We will use this folder to create our first laravel application. There's one more step before we can install Docker. And that is enabling hyper-v. Search for Windows features, open turn Windows features on or off. Here, look for hyper-v and check the box next to hyper-v. Make sure that you get a check mark here, instead of a black box like this. So if you end up with a black box, you might have to click on the plus mark, until you are able to check everything. Once the restart is done your window system is ready for Docker. Once again, this takes a few minutes and might require you to restart your system once done. Once you restart, your window system is ready for Docker.

Laravel 9.0 Essential Training: Introduction: 1) Installation and Setup: Install Docker Desktop:
Install Docker Desktop
Selecting transcript lines in this section will navigate to timestamp in the video
- [Instructor] Docker is a tool for running applications in small, lightweight containers, which should not interfere with your local computer's installed software or configuration. If you have never worked with Docker before, don't worry. It will only take a few minutes to get your development environment up and running with it. If you already have Docker installed on your system, you can skip this video. Otherwise, just follow along. Go to docker.com. Click on Get Started. I can here see a button with Download for Mac because I'm on Mac. If you're using Windows or Linux, you will see the appropriate button. Click on this to begin download. Once done, open the file and follow the instructions to complete the installation process. If you're on Windows, you will see an end screen with an option to Install required Windows components for WSL 2. Keep that checked. After clicking OK, the installer will unpack a lot of files, and you will see a button to close and log out at the end. Clicking on it might restart your system. You should then be able to open Docker. Accept the terms. You'll see the Docker icon on your task bar. Click on Dashboard. You might either see that your Docker engine is started, or no containers running. Once you see this green bar at the left bottom, it means that your Docker setup is done and the engine is running successfully.

Laravel 9.0 Essential Training: Introduction: 2) Laravel Basics: Handling routing:
- We created our first Laravel application. Now it's time we look at the code and find out where this content is located and make some edits. We will use Visual Studio Code throughout this course as the editor. If you don't already have it, I recommend downloading it before you proceed. Now, open a new tab in terminal. Make sure here inside your Laravel app directory, type code space dot type code space dot to open this folder in Visual Studio Code. This structure you see on the left, is your Laravel app code base. With these many files and folders, it's easy for a beginner to get overwhelmed at first. For the basic app that we build in this course, we only need to access a few of these and we'll take it step by step. The very first thing we find out is where this content is being fetched from. Laravel, just like other frameworks, has routes. They are defined in the routes file located in the routes directory. You can see four files here, but we will need only web.php in this course. Here you see, we have a single route defined, which is the base URL of our project. This returns the welcome view. Let's just copy this and paste it below once again Let's just copy this and paste it below once again and change the URL to home. and change the URL to home. Save the file. Now go to local host/home and you will see the same page. Try accessing some of the URL, like welcome. You get a '404 page not found' error. Back to the routes file. If you comment out this code, save the file and try accessing the base URL now, you'll see the same '404 file not found` error. So, web.php is the file where you need to register every single route in your project.

Laravel 9.0 Essential Training: Introduction: 2) Laravel Basics: Creating a view:
- [Instructor] We just saw that a route returns a view. We can simply return any HTML code within this function, like return, say h1, Welcome. Let's save and check in our browser, refresh the page and yes, you see that it gets displayed on the page, but since we cannot practically return entire HTML documents as strings here, we use separate files called views. Views are located within the resources directory, views. You can find the welcome.blade.php, which is the welcome view and yes, this is the content you are seeing on the welcome page. Let's look for the word "Documentation." Yes, here it is. Let's simply change this to Laravel Docs and in the web file, let's uncomment this and check if the documentation word has changed to Laravel Docs. Go to localhost and yes, the documentation word has now changed to Laravel Docs. Now, let's carefully look at the code here. If you scroll to lines 25, 27, 29 and 35, all of these, they're not HTML or PHP. Also, these curly braces on line 28, line 30 and line 33, this is Blade syntax. Blade is a templating engine used in Laravel. Before we talk about Blade in detail, let's create another view by creating a new file here within the views directory and name it home.blade.php. Since this is a Blade template, the file name has to end with blade.php instead of just PHP. Let this be a simple HTML document, with the h1 element here containing "Hello Laravel." Save this file and in the routes file now, change the home route to return our home view. This is just home and not home.blade.php. Now go to localhost/home. There, you can see the view we just created. While returning a view, you can pass some variables as a second argument. Here in the home route, let's pass in a name variable like so. Name equals Shruti and in the view, that is the home view, let's replace Laravel with the name variable. In PHP, you would do something like this. You would use echo to display the name. Let's see, refresh. This works perfectly fine. So you can use plain PHP within a Blade file. However, in Blade, you can wrap the variable within double curly braces like this. Go to the browser and see that the variable data is displayed here. Notice how much more readable this is. Blade also has convenient shortcuts for common PHP structures, such as if-statements and for-loops. For example, you could say if name equals Shruti, say Hello Admin, else, just display Hello User and then endif, right? Save the file and let`s check. Now it says, Hello Admin. These are called Blade directives. They definitely look neater than plain PHP. We will come across more Blade directives as we go further in our course.

Laravel 9.0 Essential Training: Introduction: 2) Laravel Basics: Building layouts with Blade:
- [Instructor] Blade templates are not only helpful for displaying data and replacing common PHP structures. We can also use them to build and maintain layouts in Laravel. Most web applications have the same generic layout across various pages like header, navigation bar, sidebar, main content and photo. Blade provides two methods for creating layouts by reusing code. First is by using template inheritance, second is by using blade components. Let's look at template inheritance first. Consider this web page with a nav bar and a main section, here's the code for the same. I have used Tailwind CSS for the sake of simplicity and included the tailwind CDN link here. However, you don't need to know Tailwind CSS to understand the concept in this video. To begin with, we have the entire mockup within the home.play. PHP, but if we need to add another view like an about page with a similar nav bar and content section repeating this entire code is not a good idea. So let's create a layouts folder within views and create a file based.blade.PHP, which will serve as our base layout. Copy the entire a code from the home view, paste it into the blade file. The content that would change in other pages is this part, so cut it out from here, and paste it into the home view replacing all of this code. We need to define this as a section, using the section directive in blade. And this would be the name of the section, so let's call it content. And this end section will be at the end of the section. This blade directives was auto completed because I am using some extensions in vs code like this Laravel Blade Snippets and Laravel Blade Spacer to add spaces automatically when I type double curly braces. I recommend installing both of these extensions. Now back to our code, so we have added this within the section content. We also need to specify which layout this file is inheriting, and that can be done using the extends directive. Here you need to pass in the relative path of the base file of the layout file. You can do that with layout/base or layouts.base. We're using the dots and (indistinct), and in the layouts file, in the place where you wish to add that section, use the yield directive, and pass the name of the section that you wish to yield here. Let's look at our browser and confirm that everything is working fine, and yes it is. Now in the nav bar, let's say you want to get the user's name from the view instead of the layout. So in the layouts file, replace this with the yield directive as well, and let's call it name itself. Back in the home view, you can pass the name again using the section directive, but without an end section. You can directly pass the name here as the second argument. Let's see if this works and yes, we see our name variable reflecting there. All of this makes it easy to add multiple views following the same layer. For example, let's create another view within the views directory about.plate.PHP. Copy all the content from home, retain all of this let it extend the layout. Let's also pass the name variable, but here let's change this content and change it to about. We also need to create a route, so open web.PHP, I'm using the keyboard shortcut command P to open this and we can quickly search for files within this project. So open the web.PHP, and I have added in about route here. So let's go to local/host/about, and you see we just added this content and retained the same layout. Next let's look at building layouts using blade components. We'll only cover the basic concept in this video. This time let's create a components folder, copy the same based.blade.PHP into the components folder as well. Here replace the yield directives with variable names using the curly braces. So this would be name and this would simply be content. And in the home view, replace the extends directive with a tag X-base, where base is the name of the component file that you just created. Again, close this with the X based tag. This looks very consistent with HTML mockup, and instead of sections here, we use slots. So replace this with X slot name of the section or name of that variable. So this would be name=name. Here is the value, replace this also with X slot name=content close the slot tag. View this in the browser, go to home and you see nothing has changed again. We can have multiple nested components, multiple slots and so on. Further in this course we will use this method of blade components for all our layouts and learn more as we go.'

Laravel 9.0 Essential Training: Introduction: 2) Laravel Basics: Working with Controllers:
- [Instructor] Looking at our routes once again, for this request, the only action is returning a view. Hence adding it as a closure makes sense. But this is not always the case. We usually have a lot of logic that goes on for every request. For example, a login request will contain the logic to check if the user's credentials match to log the user in or return an error message and so on. Hence, we use controllers to group related logic into a single class. By default, controllers are stored within the app, /Http/Controllers directory. Let's create a new controller from our terminal using the artisan command. Type sail artisan make:controller. To know the usage of this command or any artisan command, you can simply type --help, this gives us the syntax and more. Here we notice that the only argument we need is the name of the controller. So let's give it a name, sail artisan make:controller WelcomeController. This name follows the Laravel naming convention. Once you execute this command, you can see that the controller was created successfully. So in the controllers directory, we now have a new file, WelcomeController.php. We can of course create this file manually and, or add all of the score, but using a command is quicker. Now let's add a method index using public function index. And within this return, the welcome view, like so. So back in the routes file, the closure can be replaced with controllers name like this, WelcomeController::class, followed by the method name, which is index. Now, if you notice the moment I typed WelcomeController, this use statement was added automatically, so the class got imported. For this, you need the VS Code extension PHP Intelephense. If you don't have this already, install it right away. Now save this file and check the browser. Refresh, and yes, everything still works the same. We just created our first controller and defined our route to it.

Laravel 9.0 Essential Training: Introduction: 2) Laravel Basics: Understanding Laravel Configuration:
- [Instructor] Every application has a bunch of configuration values that need to be accessed from different files all across the application, like the name of the application, database credentials, mail service credentials and so on. To help manage all these environment variables, Laravel has a .env file at the root of the application. These are some app-related variables, like name, environment, application key that is unique to each project, APP_DEBUG value, which is set to true in local and false in production. This determines how much of the error information should be displayed to the user. APP_URL is the base URL. In production, this would contain your domain name. And here is a set of database connection values, including the type of connection, username, password and so on. If you're using version control like Git, you need to note that this file will not be committed to your repository. You will see that this file is a part of gitignore automatically. That's because of security reasons and also because each person in your team will have a different set of configuration values and your production server too, which is why we have an env.example file, which has all the variable names, similar to .mv file where you need to change the values. This file is committed to the repository and everybody on the team can use it to create their own .mv files. So it's important to make changes to this example file too whenever you add new config values to your .mv file. The values in .env file are retrieved from various files within the config directory. Let's look at database.php, for example. The env helper method returns the value of this key from our .mv file. The second argument's value is used as the default value in case the key is not found. Now, we can access these config values in our app. For example, let's look at app.php. Let's say we need the name of the application. Go to the welcome view. Let's say we wish to replace the title of this application with the name of our app, which is located here in the .env file through the app.php using the env helper. The way we get this here is using the config helper method because that is our config value now. And here you use the dot syntax, app.name, where app is the name of the config file and name is this value right here. Save the file. Let's look at the browser. Refresh, and this remains Laravel because that is what is the name of the application here. Let's change this to Laravel 9 and when you do this, you need to add this in double quotes because we have a space. Now, let's check and yes, this has changed to Laravel 9. I encourage you to browse the contents of all the config files here.

Laravel 9.0 Essential Training: Introduction: 2) Laravel Basics: Working with the Database:
- [Professor] In this course, we will use a MySQL database with Laravel. This default environment configuration is already ready to work with Laravel sail. If you look at the Docker compose file and scroll down to line 29, you can see the my MySQL service and all of the required details. This means you don't need to do anything else. A database with this name, first app is already created and ready to connect. You are free to make changes of course. Now, before we start creating a table and writing some queries, let's install table plus which is a graphic user interface tool to view and interact with our MySQL database. If you already have a GUI tool like SQL pro or DB viewer, feel free to use the same. Table plus has a free trial which is limited to just two connections but that's sufficient for us. So go head and download the right version for you. Mac or windows, once installed, open table plus, click on create a new connection, select my SQL. Create, give it any name that you wish I'd like to call it sail, host should be 127.0.0.1 port is 3306 like suggested copy the username password and all of the details like we have in the .N file. So that's sail and password, sail, password. The database name is first app, click on connect. This should work. Now click on this database icon to select the database and open it. Of course it's empty right now. Go to the SQL query tab here. Let's create a simple users table using this query. This table has three columns: ID, name and email also ID is the primary key. If you'd like to use the same query copy it from the GitHub repository branch associated with this video. Filename is SQLquery.text. Now run the query, refresh to see that it's created. Yes, we have the users table. Next, manually create two random users by typing in some ID and any name and give it an email ID. Create another user, another email ID. Make sure to commit the changes by clicking on this commit icon. Now from within our Laravel application let's execute some raw queries to fetch this data. Go to the routes file, Within the index method of the welcome controller, Let's add some functionality to fetch our users from the database. Now you can see this highlighted and underlined for me because I am using visual studio code extension. I am using the goto controller and goto view. Both these are helpful for navigating to the controller and view. Close this. Now command click on index to open this particular snippet. To fetch our users from the database, we could use three different ways in Laravel. Number one, using raw SQL queries. Number two, Using the query builder and number three, Eloquent ORM. Let's look at the first two methods in this video. You can execute raw SQL queries in Laravel with the help of the DB facade. A facade is a simplified interface for complex operations. You will encounter more facades offered by Laravel in the upcoming videos, For now, we can use this select method on this facade. This code again is auto completed by the lateral snippets extension, which is right here. Let me close this. Now remove all this select stuff from users is sufficient for us. Remove this as well. Now let's assign this to users variable. You will of course see that our DB class is not imported. You can right click and import class. If you are using another VS code extension which is the PHP name space resolver. Let me show that once again. PHP name space resolver, this is the one that I have installed. So we installed three VS code extensions here. Now you can right click and say import class and this will be added automatically for you. Next, let's diedump this user's variable to see what we've got. Open the browser, refresh and yes. We have fetched our users from the database. You can see both the users and the array. Next let's fetch the same users from the database using the query builder instead of raw queries. Let's commit this out first. This is again done with DB facade, using the table method. Instead. The table is autofilled for us and here we can chain our constraints like so. Let's select two columns name, email. Let's add another constraint where not Null email and then order by name and so on. Finally, a get method to get the results. Once again, assign this to the users, variable, sorry and then die and dump these users to see what this gives us. Open the browser ,refresh. And there you go. This time, we don't simply have an array but we have collection, which is even better. There's a lot more that can be done with collections in Laravel which we'll see later in this course. Of course we have the data as requested. Though the query builder is powerful enough for this course we will be using the Eloquent ORM which we'll explore very soon.

Laravel 9.0 Essential Training: 2) Laravel Basics: Creating and running migrations:
- [Instructor] In the previous video we created a users table using a GUI tool, but when working in teams and when deploying your app to production, creating a table manually like this is not the best approach. Migrations in Laravel help in creating and modifying table structures, acting like a version control. Now, let's delete this users table and recreate it using migrations. Delete. Okay, now commit the changes. Now, open terminal and make sure you're within your project directory. Use the Artisan command sail artisan make:migration, specify the name of the migration here, something like create_users_table. Laravel uses this name to guess the table name and also the create word helps Laravel understand that you wish to create this. Executing this command will give you an error later because when you create a Laravel project by default create_users_table migration already exists. So let's change this users to students. Hit Enter. This migration is created. You can find this file in the database directory, migrations, last file. Here it is. We use the schema facade to create and modify tables from this migration file. You can see two methods here, up and down. The up method is used to create a table or column, while the down method is used to destroy the same in case of rollback. The create method of schema facade is used for creating a new table, which takes the table name as the first argument and the closure here is used to define the table structure. As you can see, Laravel has already guessed the table name and prefilled it for us. It also knows that you want to create it. For specifying the columns, you can see two methods, ID and timestamps already here. Laravel offers multiple such methods for creating different types of columns. The ID method creates the primary key ID column that auto increments, the timestamp method creates two columns, created at and updated at. After ID let's use a string method to create our name column and, once again, to create our email column. Save the file. For other available methods like these you can refer to the Laravel documentation, Available Column Types. Go back to the terminal and type sail artisan migrate. This command will run all the migrations that haven't been run so far. So when you execute this for the first time along with your students table, you might see few other migrations run. Now, open table plus, and refresh to see all the other tables that have been added now. These have been added by Laravel by default. Feel free to explore the structure of other tables created here. As you can see, the students table is created with these columns that we specified in the migration file.'

Laravel 9.0 Essential Training: 3) Starting Your Project: Understanding project Requirements:
- [Instructor] Learning isn't complete without hands-on experience. We now have the basic understanding of Lateral to start working on a simple project. The rest of the course is dedicated to creating a simple notes taking web application, which we call LiteNotes. Let's look at the features of the app we will be building. Here's the landing page with tool links, login, and register. A new user needs to register with name, email, and password. This creates a new account and logs the user in. An existing user can log in from the login page. Let me just log in right now. You will see all your notes listed as soon as you log in. They'll be ordered by showing the latest updated notes first. You can see five notes per page, and then a pagination at the bottom. You can view more, like so. You can create a new note right from here, give it a title, add some text. Both of these are required fields. So if you leave any of them empty, you will be prompted like this. Once you add some content, you can save the note, and you will be able to see it right here at the top. You can click on any note to view the full note here. You can go back and click on any of the notes. Look at the URL here. Each note has a unique ID and on this page, you can see when the note was created and when it was last updated. Now you have two options. You can either edit this note or move to trash. Let's click on Edit. On this edit page, you can edit the title or the text or both. Once you edit and save note, you will see a flash message, note updated successfully, that disappears on page refresh. We can delete this note. You are asked for confirmation to move this note to trash. Click OK. Now you can find this note in trash. Clicking on this again will display the full note with two different options. You can either restore this note or delete it permanently. Clicking on Restore will immediately move this back to notes. You can find this here. Let's move this to trash again to delete it permanently. Find it in trash. Let's delete forever. You'll be asked to confirm again. Clicking OK will delete this note forever. Finally, you can log out. Here's a quick summary. We have the complete login flow with register, login, logout, and reset password. You can create notes, view the list, view individual notes, edit them, move to trash, restore deleted items, and delete notes forever. Let's start building the LiteNotes ap

Laravel 9.0 Essential Training: 3) Starting Your Project: Setup a new project:
- [Instructor] Let's start with a new Laravel project. Make sure Docker is running. Open terminal. If your previous Laravel app is still running, exit using Ctrl + C command, and stop it using sail down. Once this is done, navigate to the directory where you wish to create your project. I will navigate back to the Projects directory. Now open Laravel docs. Go to Getting Started. And once again, copy this command to create a new Laravel application. Paste it in terminal. Change the name of the application to LiteNotes. Hit Enter. You may be asked to enter your system password to complete installation. Once done, CD into LiteNotes and open this up in Visual Studio Code by typing code space dot, Enter. Go back to the terminal and start the app using sail up command. While this is running, let's open a new tab and keep it ready for executing other commands. Now open the browser and go to local host to verify that the project is successfully installed and running. So it does. Next, open TablePlus. Create a new connection like we did before with MySQL create, give it a new name. Host is 127.0.0.1. Port is 33306. Username must be sail, password is password, and the database name is LiteNotes. Connect. Currently, there are no tables. Go back to terminal, and run the first migration using the command sail artisan migrate. This is done to create the initial tables. The default tables are created. We now have the basic setup done.

Laravel 9.0 Essential Training: 3) Starting Your Project: Add authentication with Laravel Breeze:
- [Instructor] After the basic setup is done. The very next thing to implement in our project is the authentication. All the features of register, log in, log out and password reset, all these are apart authentication. It would take us a long time to build these manually but luckily Laravel has a a few starter kits to make this very simple and quick. As you can see, there are two kits available. Breeze and Jetstream. Breeze provides a simple and minimal starting point for authentication, while Jetstream offers more advanced features. Breeze uses Tailwind CSS for styling even if you have no prior knowledge of Tailwind CSS it's fairly easy to work with it, but if you choose not to include Tailwind CSS in your project at all you can choose a package like Laravel UI to add authentication which uses the bootstrap framework instead. Breeze is what we will use in our project. So let's go ahead and install it a in our application with this command, copy this, go to your terminal, and this has to be prefixed with sell. So sale and paste, the command, hit Enter. This might take a while. Once done, let's use the artisan command sell artisan Breeze install. This command will add the authentication roots, views, controllers, and other required resources into our project. Once successful, you will be prompted to run NPM install and NPM run dev. This is required because Breeze has added some CSS which must now be compiled for the styles to work. Just in case you don't have no JS and NPM installed. You need to install both of these, before you proceed further. Install node from node js.org, and by default, this will also install NPM. Let's get back to the terminal and do NPM install. This will install the project dependencies, this might take quite a while as well. Now run the command npm run dev. Now, if you go to your browser and refresh everything looks exactly the same, except now your have two new links, log in and register. Let's see if it works first, register a user type in a name. Type in a password, register, it says you're logged in. That's great, let's log out and try logging in again with the email and password we just created. Yeah, we are logged in again. Log out once again, so we saw that register worked log in and log out worked, but in the Log in page Forgot password and reset password will work only once you add credentials of your mail server in the .nv file, so you can explore that on your own. Now it's time to look at the code that Breeze has added for us. So open Visual Studio Code, first open the routes file command B web.php, in the routes file, you can look at all the routes that were added. We have the dashboard route that uses the auth middleware here you can see. This means this route can be accessed only by logged in users. If you want to test, let's go back to the browser, now that we are logged out, try accessing the dashboard and you see, you will be prompted to login first. And let's go back to the code, all the authentication related routes can be found in the auth.php, which is here. Let's look at the controllers, app HTTP controllers Auth and you can see that all these controllers have been added to handle the functionality, feel free to explore them, let's also look at the views, resources, views, you can see that there are three directories and or dashboard blade file added. We have all these view files combined with components and layouts added, if you like to gain a deep understanding of how to build layouts and components with blade this is a great example to dig in and learn more.

Laravel 9.0 Essential Training: 3) Starting Your Project: Add styles to your project:
- [Instructor] It's time to change this landing page. While doing so, we'll learn how to add styles to our views. First, let's remove all this from the welcome view. Go to Visual Studio Code, open welcome.blade.php. We don't need any of these styles here, so let me remove all of them. Scroll down, and if you carefully look here, this is the block of code that adds the login and register links to our page. So let's retain this and remove everything else from the page. From here until this dif. Yes, that's perfect. Save this, go to the browser and refresh. Of course, we've lost the content, but we've also lost the styling for login and register. But if you go into the login page, we have the styles here. So let's go and check where the login page is getting the styles from. Go to code, open login.blade.php. This is using the guest layout component which is located in the layouts folder. So open layouts folder, guest.blade.php. And here is the style sheet. The asset function is used to specify the URL to Laravel assets within the public directory. So here you can see public, css, app.css. So this is the file that is being fetched here. So in our welcome view, we need to link the same style sheet. Let's also link the script, though we might not use it in this course. Copy this, paste it into the welcome blade file, right here. Save the file, go to the browser, refresh the window, and yes, we have our styles back. Only thing is we might not use dark mode here in this course, so let's remove all the classes that have the dark prefix. Find dark. And let's just remove all these styles. So in Tailwind, this is used for dark mode styles. Yes, that's removed. Go back to the browser and we can see the light mode. All these were the styles added by Laravel Breeze. Now let's see how we can add our own CSS. We'll also be using Tailwind CSS, but if you don't wish to, I'll show you at the end of this video how to add regular CSS. Now first, at the end of this, in place of the previous content, let's add a h1 one tag and give it a class, text-5xl, which makes it five times bigger. And let's just say, LiteNotes. Go to the browser, refresh, you'll see that LiteNotes has been added, but somehow, the text-5xl class is not taking effect. Tailwind CSS is already installed along with Breeze, but we need to build the styles whenever we add a new utility class. So when we build, the required styles get added into this public folder that we just saw, app.css. All these styles got generated when we executed npm run dev after installing Breeze. Now we can do npm run dev again, or we have a better option, which is run npm run watch instead of npm run dev. What this does is it starts watching the files for change and whenever we add a new utility class, they're automatically built. So execute this, keep this running. Now go back to the browser and refresh. You'll see that the text-5xl taken effect now. This was about Tailwind CSS, but if you want to use regular CSS, you can go to the resources directory, css folder here, and in the app.css, you can add your custom styles right here below. Don't remove this because Breeze is using Tailwind CSS. You will lose all those styling. But if you want to take care of the styling done by Breeze, also yourself, you feel free to customize. This is where you add your Tailwind CSS custom styles or your own regular CSS custom styles. And when you build, they will be added into app.css within the public folder. Now let's get back to welcome page. And while we are changing all the content, let's also change the title. Let's fetch this title from the .NV file by using the config helper, app.name. Let's check what the app name is here. And this is Laravel. Let's change it to LiteNotes and check in the browser if that worked. And yes, we have the app name here as our title.

Laravel 9.0 Essential Training: 3) Starting Your Project: Create the first model with migration:
- Now let's create our first model along with the migration. We are creating notes taking app. So we clearly need a notes table and a corresponding note model. So open terminal, and create the note model using the artisan command sail artisan make model followed by the model name which is Note. Like we discussed before by convention. The model name should start with an uppercase letter and should be singular. So it's note and not notes. Let's change it back to note. Now this same command with a dash m option will also create the migration for the table. Let's use this, hit enter. You can see that the model is created along with the migration. Let's verify. Open visual studio code, go to app, models, and yes, we have the note model. Then go to database, migrations, and open this file. We have the migration. Note that, we have these required fields prefilled for us. We already have our primary key and timestamps. So let's add a string column for the title. Table, string, title, and then a long text column for our text. This is the actual content of the notes. Now each note belongs to a user. So, we need to include the user ID as foreign key that can be done with, table, using the foreign ID method, which is here, User ID will be the name of the column. Now you can chain it with another method, constrained to add the foreign key constraints. This looks fine. We can go ahead and migrate. So, go to terminal and run the command sale. Artisan migrate. This seems to be done. Let's open table plus to verify, refresh, and yes, we have the Notes Table with all the required columns that we just added. We also have our Note Model ready.

Laravel 9.0 Essential Training: 3) Starting Your Project: Register resource routes:
- Let's start creating the required routes for our application in our routes file, web.php. We need a get route, notes to list all the notes of the logged in user. Let's leave the second argument blank for now. We need another get route, notes/note to display a single individual note notes/note to display a single individual note where this will be the unique ID in the URL. Then, we need another get route, notes/create to display the form notes/create to display the form to create a note. And then, we need a post route to save this created note. And so on. And so on. We need a route to edit the note. We need a route to edit the note. We need a route to update and another one to destroy. Each of these will be handled by different methods of the same controller. These routes and actions also known as crud operations are common to every single web application. There's usually at least one resource that needs to be created, displayed, edited, and deleted, which is why Laravel helps us create all these routes using just one single line, which is route resource notes. using just one single line, which is route resource notes. And here will be the controller. This line alone will generate all the required resource routes. Go to the Laravel documentation and look for resource controllers. You can find this line here which is what we have just used. This single line will create all the required routes for our application. Since this will not work without the controller, let's comment it out for now. And we will create our resource controller next.

Laravel 9.0 Essential Training: 3) Starting Your Project: Create resource controller actions:
- [Instructor] Let's head over to the terminal to create our resource controller. It's very similar to creating a normal controller sail artisan make:controller followed by the name of the controller, which in our case is NoteController. And to create a resource controller you just need at the resource flag. Hit Enter, controller created successfully. Let's verify app, Http, Controllers and yes, NoteController.php. Now look at this, lalware has created the index method create method, store, show, edit, update and destroy. All the actions that we need to perform on our notes. This saves us a lot of time. Now back to web.php, uncommand this line and add the controller NoteController::class and Scroll up to make sure that the controller has been imported by our extension. Since we want all these routes to be available only to the logged in users, let's add at the auth middleware, middleware auth. When this is added, lalware makes sure that none of these routes are available without login. Let's verify. Go to localhost/notes, and you will see that you don't see a footnote for error instead a blank page because this route exists. Now go back to the dashboard and log out and then try accessing the same URL localhost/notes, and now you're prompted to login first. That means the auth middleware is working. Let's log back in again. And now we don't need the dashboard route. The moment you login, you're actually redirected to the dashboard URL which is not something we need. We want to be directed to the notes directly. This we changed in the route service provider. So search for RouteServiceProvider.php and right here on line 20, change this dashboard to notes. Save the file, now log out and try to log back in. And you see you are directed to notes as soon as you login. Now, we have the entire structure ready for adding functionality and views. Let's add all of them, one action and one view at a time.

Laravel 9.0 Essential Training: 3) Starting Your Project: Add an index method to fetch all of the notes:
- [Instructor] As we just saw, our notes page is blank. And we are going to change that soon. Look at the documentation under resource controller actions and you will note that the notes URI corresponds to the index action in the controller. So go to VS Code, open NoteController.php. index method, this is where we fetch the notes from the database and pass the content to the view to display them. But since we don't have any notes yet, let's manually add a note to the database through TablePlus. Open the notes table, create a new row by adding a row here, id is one, user_id is one because we just have one user so far with id one, title, give it a title First note, add some text here, Text of note one, and then add the NOW timestamp for created_at and updated_at by using the NOW function. Make sure to commit the changes. And we do have our first note created. Let's fetch this in our controllers index method. Each user should be able to view only their notes. So let's get the logged in user's ID first, with $userId equals Auth::user id. The Auth facade gives us access to the logged in user. We can further shorten this with just Auth::id using the id helper method. But this is not imported, so right-click Import Class. This will import the Auth facade for us. Now using eloquent, let's get all the notes of this user with $notes equals Note model where user_id is the $userId that we just fetch chained by the get method. Let's check what this gives us. dd notes. Look at the browser. Okay, one second. We don't have this imported. Right-click, Import Class, import the note model and then let's get to the browser. Refresh, and yes, we have a collection with one item, which is our note that we just created, first note and the text. Great, let's quickly create another note, similarly. So add a row two, user_id as one, title second note, and then text Some text here. Once again, use NOW and NOW. Commit the changes. Back to the controller's index method or back to the browser and let's just see if we have both the notes, and yes we do. The first note here and the second note here. Back to the controller. Let's combine these two lines by replacing the $userId directly with Auth::id. And let's delete this line. Now using the collections each method, $notes each function $note, let's just display only the notes title. So dump $note title. Let's see what this gives us. Refresh and yes, you see first note and second note. The notes here are fetched in the default order, but we want to show the latest first, right? So back to the controller, let's change this query with the latest method. Now let's see what we got. Now we have the last created note first. Now let's assume we make changes to the first note. So go to TablePlus, make some changes, say first note edited and change the updated_at column. Commit the changes. Now refresh the browser. And we still have the second note first and first note edited. This is natural because it's ordering the notes by latest created first. However, in our case, it would be best to display the latest updated notes first. So we'd want to fetch the latest notes ordered by the updated_at column instead of the created_at column. And this can be done by simply mentioning the column that we need to use for ordering. So here, it is updated_at. Now let's check. Refresh and yes, we have the desired order. Go back to the code, remove this. And in the next video, we'll create a view to display the notes with correct styling.


Laravel 9.0 Essential Training: 3) Starting Your Project: 
