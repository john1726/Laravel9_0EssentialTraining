Laravel 9.0 Essential Training (see https://www.linkedin.com/learning/laravel-9-0-essential-training/why-laravel?autoplay=true&contextUrn=urn%3Ali%3AlyndaLearningPath%3A5df00060498ec7589c054544&u=103738058):

Shruti Balasa:
Full-Stack Web Developer and Tech Educator
RELATED TO THIS COURSE
Certificates 
Show all
Course details
2h 52m
Intermediate
Released: 4/22/2022
Laravel, the open-source PHP web framework, has become one of the most widely used ecosystems for building scalable apps at lightning-quick speed. If you’re a PHP developer looking to take your career to the next level, this course was made for you. Join instructor Shruti Balasa as she takes you on a journey through the fundamentals of the Laravel framework.


g1
Learn about MVC architecture, how the Laravel framework is structured, routes and controllers, Blade files, models, and best practices for interacting with a database. Get tips on using various components in Laravel as you build your own simple note-taking app. From user authentication and routing, to CRUD operations and database relations, find out why the latest version, Laravel 9.0, allows you to build web apps quickly and easily, no matter where you are on your coding journey.

Laravel 9.0 Essential Training: Introduction: Why Laravel?
-Laravel is an open source and popular web framework 

Laravel 9.0 Essential Training: Introduction: Prerequisites for this course:
1) Basic HTML
2) Core PHP
3) Object-oriented concepts
4) databases

Nice to Know:
1) HTTP Requests
2) MVC architecture

Good to Have:;
1) Dedicated computer
2) Good internet connection

Laravel 9.0 Essential Training: Introduction: Understand the MVC architecture:
-Split application into:
    1) Models: interacts with database
    2) Views: this is the UI
    3) Controllers: connects the model and the view

Benefits:
• Easy to maintain
• Avoids code repetition

The Flow:
• User interacts with the view
• Controller takes input from the view
• Controller translates the input into a request for model
• Model grabs data from the database
• Controller passes data to view

Laravel 9.0 Essential Training: Introduction: Using the exercise files for this course:
-All of the sample code is available here:

    https://github.com/LinkedInLearning/laravel-9-essential-training-3007804

-Each branch contains the code that is related to any particular section of the course
-Also need to have docker installed
-If you are running on Windows then WSL2 must be enabled

psalm@Grieg /cygdrive/d/GDrive/GResources/Courses/Lynda/BuildYourLaravelSkills/Laravel9_0EssentialTraining/laravel-9-essential-training-3007804
$ docker run --rm \
-u "$(id -u):$(id -g)" \
-v $(pwd):/var/www/html \
-w /var/www/html \
laravelsail/php81-composer:latest \
composer install --ignore-platform-reqsdocker run --rm \
-u "$(id -u):$(id -g)" \
-v $(pwd):/var/www/html \
-w /var/www/html \
laravelsail/php81-composer:latest \
composer install --ignore-platform-reqs
Unable to find image 'laravelsail/php81-composer:latest' locally
latest: Pulling from laravelsail/php81-composer
7a6db449b51b: Pull complete
ad2afdb99a9d: Pull complete
dbc5aa907229: Pull complete
82f252ab4ad1: Pull complete
8d88582e93e0: Pull complete
c07b7e794fcd: Pull complete
daa6d19956e0: Pull complete
c562b73ddb4e: Pull complete
7da43ba5364f: Pull complete
cd7f709c9d0a: Pull complete
4e2119970e11: Pull complete
3b3e64ded552: Pull complete
4f4fb700ef54: Pull complete
a1e7bb87f923: Pull complete
9578861b5225: Pull complete
Digest: sha256:276faba897279126a0f20763ddac5a0c7ecb60e1ea8f0e7851f3196f56e248d4
Status: Downloaded newer image for laravelsail/php81-composer:latest
Composer could not find a composer.json file in /var/www/html
To initialize a project, please create a composer.json file. See https://getcomposer.org/basic-usage

Laravel 9.0 Essential Training: Introduction: 1) Installation and Setup: Choose the right tool:
1) Local Apache Server
2) Homestead Vagrant box
3) Docker and Sail

Local Apache Server:
• Install Apache Server, PHP, Composer, MySQL
• Windows - XAMPP and WAMP
• Long process
• Multiple issues

Homestead Vagrant Box:
• Official prepackaged environment
• Runs on any OS
• Needs virtual box
• Requires a lot of resources

Sail with Docker:
• Built-in solution by Laravel
• Only install Docker
• Official way of installing Laravel

OS-Specific Tools:
• Laravel Valet -- macOS
• Laragon -- Windows

Laravel 9.0 Essential Training: Introduction: 1) Installation and Setup: Prerequisites for Windows OS:
• Enable Windows Subsystem for Linux (WSL)

C:\Windows\system32> wsl --install

• Then you will need to create a new user for Ubuntu on WSL
• Also it is suggested to install "Windows Terminal" from the Microsoft App Store
• Ensure that you put your projects in your home folder

/home/rmoore

• Make sure that "Hyper-V" has a checkbox in "Windows Features"

Laravel 9.0 Essential Training: Introduction: 1) Installation and Setup: Install Docker Desktop:
• Docker is a tool for running software in small lightweight containers
• Once you see a green bar on the bottom left then you know that Docker is running 

Laravel 9.0 Essential Training: Introduction: 1) Installation and Setup: Create your first Laravel application:
• Let`s create our first Laravel application
• Open the following link:

https://laravel.com/docs/9.x#getting-started-on-windows

• From here we see how to start:

rmoore@Grieg:~/DevProjects $ curl -s https://laravel.build/first-app | bash
...

• Then start the app using:

moore@Grieg:~/DevProjects/first-app $ ./vendor/bin/sail up

• Then open a browser tab to http://localhost
• Instead of having to type the full command above we can create an alias:

alias sail='[ -f sail ] && sh sail || sh vendor/bin/sail'

• Can view a list of the helpful artisan commands by using:

rmoore@Grieg:~/DevProjects/first-app$ sail artisan list
Laravel Framework 9.45.1

Usage:
  command [options] [arguments]

Options:
  -h, --help            Display help for the given command. When no command is given display help for the list command
  -q, --quiet           Do not output any message
  -V, --version         Display this application version
      --ansi|--no-ansi  Force (or disable --no-ansi) ANSI output
  -n, --no-interaction  Do not ask any interactive question
      --env[=ENV]       The environment the command should run under
  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

Available commands:
  about                  Display basic information about your application
  clear-compiled         Remove the compiled class file
  completion             Dump the shell completion script
  db                     Start a new database CLI session
  docs                   Access the Laravel documentation
  down                   Put the application into maintenance / demo mode
  env                    Display the current framework environment
  help                   Display help for a command
  inspire                Display an inspiring quote
  list                   List commands
  migrate                Run the database migrations
  optimize               Cache the framework bootstrap files
  serve                  Serve the application on the PHP development server
  test                   Run the application tests
  tinker                 Interact with your application
  up                     Bring the application out of maintenance mode
 auth
  auth:clear-resets      Flush expired password reset tokens
 cache
  cache:clear            Flush the application cache
  cache:forget           Remove an item from the cache
  cache:table            Create a migration for the cache database table
 config
  config:cache           Create a cache file for faster configuration loading
  config:clear           Remove the configuration cache file
 db
  db:monitor             Monitor the number of connections on the specified database
  db:seed                Seed the database with records
  db:show                Display information about the given database
  db:table               Display information about the given database table
  db:wipe                Drop all tables, views, and types
 env
  env:decrypt            Decrypt an environment file
  env:encrypt            Encrypt an environment file
 event
  event:cache            Discover and cache the application's events and listeners
  event:clear            Clear all cached events and listeners
  event:generate         Generate the missing events and listeners based on registration
  event:list             List the application's events and listeners
 key
  key:generate           Set the application key
 make
  make:cast              Create a new custom Eloquent cast class
  make:channel           Create a new channel class
  make:command           Create a new Artisan command
  make:component         Create a new view component class
  make:controller        Create a new controller class
  make:event             Create a new event class
  make:exception         Create a new custom exception class
  make:factory           Create a new model factory
  make:job               Create a new job class
  make:listener          Create a new event listener class
  make:mail              Create a new email class
  make:middleware        Create a new middleware class
  make:migration         Create a new migration file
  make:model             Create a new Eloquent model class
  make:notification      Create a new notification class
  make:observer          Create a new observer class
  make:policy            Create a new policy class
  make:provider          Create a new service provider class
  make:request           Create a new form request class
  make:resource          Create a new resource
  make:rule              Create a new validation rule
  make:scope             Create a new scope class
  make:seeder            Create a new seeder class
  make:test              Create a new test class
 migrate
  migrate:fresh          Drop all tables and re-run all migrations
  migrate:install        Create the migration repository
  migrate:refresh        Reset and re-run all migrations
  migrate:reset          Rollback all database migrations
  migrate:rollback       Rollback the last database migration
  migrate:status         Show the status of each migration
 model
  model:prune            Prune models that are no longer needed
  model:show             Show information about an Eloquent model
 notifications
  notifications:table    Create a migration for the notifications table
 optimize
  optimize:clear         Remove the cached bootstrap files
 package
  package:discover       Rebuild the cached package manifest
 queue
  queue:batches-table    Create a migration for the batches database table
  queue:clear            Delete all of the jobs from the specified queue
  queue:failed           List all of the failed queue jobs
  queue:failed-table     Create a migration for the failed queue jobs database table
  queue:flush            Flush all of the failed queue jobs
  queue:forget           Delete a failed queue job
  queue:listen           Listen to a given queue
  queue:monitor          Monitor the size of the specified queues
  queue:prune-batches    Prune stale entries from the batches database
  queue:prune-failed     Prune stale entries from the failed jobs table
  queue:restart          Restart queue worker daemons after their current job
  queue:retry            Retry a failed queue job
  queue:retry-batch      Retry the failed jobs for a batch
  queue:table            Create a migration for the queue jobs database table
  queue:work             Start processing jobs on the queue as a daemon
 route
  route:cache            Create a route cache file for faster route registration
  route:clear            Remove the route cache file
  route:list             List all registered routes
 sail
  sail:install           Install Laravel Sail's default Docker Compose file
  sail:publish           Publish the Laravel Sail Docker files
 sanctum
  sanctum:prune-expired  Prune tokens expired for more than specified number of hours.
 schedule
  schedule:clear-cache   Delete the cached mutex files created by scheduler
  schedule:list          List all scheduled tasks
  schedule:run           Run the scheduled commands
  schedule:test          Run a scheduled command
  schedule:work          Start the schedule worker
 schema
  schema:dump            Dump the given database schema
 session
  session:table          Create a migration for the session database table
 storage
  storage:link           Create the symbolic links configured for the application
 stub
  stub:publish           Publish all stubs that are available for customization
 vendor
  vendor:publish         Publish any publishable assets from vendor packages
 view
  view:cache             Compile all of the application's Blade templates
  view:clear             Clear all compiled view files
rmoore@Grieg:~/DevProjects/first-app$

Laravel 9.0 Essential Training: 2) Laravel Basics: Handling routing:
• Consider ~/routes/web.php
• web.php is the file where you need to register every single route in your project

Laravel 9.0 Essential Training: 2) Laravel Basics: Creating a view:
• We can return anything we want in our web.php:

Ex:

Route::get('/home', function () {
    return '<h1>Welcome</h1>';
});

• If you go to ~/resources/views/welcome.blade.php and see the curly braces that is blade syntax:

        <div class="relative flex items-top justify-center min-h-screen bg-gray-100 dark:bg-gray-900 sm:items-center py-4 sm:pt-0">
            @if (Route::has('login'))
                <div class="hidden fixed top-0 right-0 px-6 py-4 sm:block">
                    @auth
                        <a href="{{ url('/home') }}" class="text-sm text-gray-700 dark:text-gray-500 underline">Home</a>
                    @else
                        <a href="{{ route('login') }}" class="text-sm text-gray-700 dark:text-gray-500 underline">Log in</a>

                        @if (Route::has('register'))
                            <a href="{{ route('register') }}" class="ml-4 text-sm text-gray-700 dark:text-gray-500 underline">Register</a>
                        @endif
                    @endauth
                </div>
            @endif

• Now create a simple home.blade.php file:

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Document</title>
    </head>
    <body>
        <h1>Hello Laravel</h1>
    </body>
</html>

• Then go to web.php and add home:

Route::get('/home', function () {
    return view('home');
});

• Now go to:

http://localhost/home

Where you will see:

Hello Laravel

• Now try passing in a variable:

Route::get('/home', function () {
    return view('home', ['name' => "Roger"]);
});

• Next in the blade file change:

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Document</title>
    </head>
    <body>
        <h1>Hello <?php echo $name; ?></h1>
    </body>
</html>

• So you can add plain HTML to a php file but you can also use blade features:

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Document</title>
    </head>
    <body>
        <h1>Hello {{ $name; }}</h1>
    </body>
</html>

• Notice how much more readable the above is
• You can also add flow control:

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Document</title>
    </head>
    <body>
        @if($name == "Roger")
        <h1>Hello Admin {{ $name; }}</h1>
        @else 
        <h1>Hello {{ $name; }}</h1>
        @endif 
    </body>
</html>

Laravel 9.0 Essential Training: 2) Laravel Basics: Building layouts with Blade:
Blade Templates:
• Display data
• Replace PHP structures
• Build layouts

-Most pages have similar areas like:
• Header
• Navigation Bar
• Sidebar
• Main
• Footer

Creating Layouts with Blade:
1) Template Inheritance
2) Blade Components

Creating Layouts with Blade: 1) Template Inheritance:
• If you type "@section('content')" with the "Laravel Blade Snippets" and "Laravel Blade Spacer" VS Code extensions, then it will expand
• Add to ~\views\home.blade.php:

@extends('layouts.base')

@section('content')
      <h1 class="text-4xl font-bold">Home</h1>
      <p class="mt-4 text-lg">Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eaque in saepe ea eius ex recusandae impedit earum! Aperiam quibusdam quos voluptate quisquam cum saepe incidunt odio delectus! Eius, obcaecati asperiores.</p>
@endsection

• Add to ~\views\layouts\base.blade.php:

   <section class="p-12 mx-auto max-w-6xl text-gray-800">
      @yield('content')
   </section>

• Now in the Navbar let`s say you want to get the user`s name from the view instead of the layout:

      <span>Hello, @yield('name')</span>

• Also in home.blade.php add:
      
@section('name', 'Roger')      

• Now also add about.blade.php and copy the code from home.blade.php and update it:

@extends('layouts.base')

@section('name', 'Roger')

@section('content')
      <h1 class="text-4xl font-bold">Home</h1>
      <p class="mt-4 text-lg">About</p>
@endsection

• We also need to create a route in web.php:

Route::get('/about', function () {
    return view('about');
});

• Now test it by going to http://localhost/about

Creating Layouts with Blade: 2) Blade Components:
• Paste base.blade.php into the components folder as well
• Now replace the yield directives with curly braces:

<span>Hello, {{ $name }}</span>

{{ $content }}

• Now in the home.blade.php replace with:

<x-base>
    <x-slot name="name">Shruti</x-slot>
    <x-slot name="content">
       <h1 class="text-4xl font-bold">Home</h1>
       <p class="mt-4 text-lg">Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eaque in saepe ea eius ex recusandae impedit earum! Aperiam quibusdam quos voluptate quisquam cum saepe incidunt odio delectus! Eius, obcaecati asperiores.</p>
    </x-slot>
 </x-base>

 Where "<x-base>" is the component file that you just created.  Also instead of "section" we replace that with "slot".

Laravel 9.0 Essential Training: 2) Laravel Basics: Working with Controllers:
-In web.php we group related functionality in a route:

<?php

use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

Route::get('/', function () {
    return view('welcome');
});

Route::get('/home', function () {
    return view('home', ['name' => "Roger"]);
});

Route::get('/about', function () {
    return view('about');
});

-By default, controllers are located here:

~\app\Http\Controllers

-Let`s create a new controller from out terminal using the artisan command:

rmoore@Grieg:~/DevProjects/first-app$ sail artisan make:controller --help

Description:
  Create a new controller class

Usage:
  make:controller [options] [--] <name>

Arguments:
  name                   The name of the class

Options:
      --api              Exclude the create and edit methods from the controller
      --type=TYPE        Manually specify the controller stub file to use
      --force            Create the class even if the controller already exists
  -i, --invokable        Generate a single method, invokable controller class
  -m, --model[=MODEL]    Generate a resource controller for the given model
  -p, --parent[=PARENT]  Generate a nested resource controller class
  -r, --resource         Generate a resource controller class
  -R, --requests         Generate FormRequest classes for store and update
  -s, --singleton        Generate a singleton resource controller class
      --creatable        Indicate that a singleton resource should be creatable
      --test             Generate an accompanying PHPUnit test for the Controller
      --pest             Generate an accompanying Pest test for the Controller
  -h, --help             Display help for the given command. When no command is given display help for the list command
  -q, --quiet            Do not output any message
  -V, --version          Display this application version
      --ansi|--no-ansi   Force (or disable --no-ansi) ANSI output
  -n, --no-interaction   Do not ask any interactive question
      --env[=ENV]        The environment the command should run under
  -v|vv|vvv, --verbose   Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

rmoore@Grieg:~/DevProjects/first-app$ sail artisan make:controller WelcomeController

  INFO  Controller [app/Http/Controllers/WelcomeController.php] created successfully.

  
WelcomeController.php:
<?php

namespace App\Http\Controllers;

use Http\Controllers\WelcomeController;
use Illuminate\Http\Request;

class WelcomeController extends Controller
{
    public function index() {
        return view('welcome');
    }
}

-Now in web.php:

-Add the VS Code extension "PHP Intelliphense" so that using statements are added automatically
-Now check the page at http://localhost

-----

Illuminate
 \ 
Contracts
 \ 
Container
 \ 
BindingResolutionException
PHP 8.1.13
9.45.1
Target class [Http\Controllers\WelcomeController] does not exist.

-> Solution: Had to change:

use Http\Controllers\WelcomeController;

To:

use App\Http\Controllers\WelcomeController;

Laravel 9.0 Essential Training: 2) Laravel Basics: Understanding Laravel Configuration:
-Every application has a bunch of configuration values that need to be accessed from different files all across the application, like the name of the application, database credentials, mail service credentials and so on.
-To manage these settings Laravel uses a .env file
-These values include:

APP_NAME=Laravel
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

-This file is not committed to your repository in git
The values in .env file are retrieved from various files within the config directory. Let`s look at database.php, for example. The env helper method returns the value of this key from our .env file.
-See config/database.php
-In welcome.blade.php let`s change:

    <title>Laravel</title>

with the name of our application in config/app.php:

'name' => env('APP_NAME', 'Laravel'),

Change in welcome.blade.php to:

        <title>{{  config('app.name') }}</title>

-In .env let`s change the name to:

APP_NAME="Laravel 9"

-Now the title in the browser tab should change to:

Laravel 9

Laravel 9.0 Essential Training: 2) Laravel Basics: Working with the Database:
-We will use mysql database
-See:

DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=first_app
DB_USERNAME=sail
DB_PASSWORD=password

-Check docker-compose.yml at linen 29:

    mysql:
        image: 'mysql/mysql-server:8.0'
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ROOT_HOST: "%"
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        volumes:
            - 'sail-mysql:/var/lib/mysql'
            - './vendor/laravel/sail/database/mysql/create-testing-database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh'
        networks:
            - sail
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
            retries: 3
            timeout: 5s

-The above means that you do not need to do anything else
-Let us install TablePlus which is a GUI to interact with mysql

-> Using DB Visualizer because TablePlus is a paid product:

$ wget https://dbvis.com/product_download/dbvis-23.1/media/dbvis_linux_23_1.deb

g$ sudo dpkg -i dbvis_linux_23_1.deb

Or DataGrip:

$ sudo snap install datagrip --classic

-----

rmoore@Grieg:/tmp$ systemctl status mariadb

System has not been booted with systemd as init system (PID 1). 
Can`t operate. Failed to connect to bus: Host is down

-See https://askubuntu.com/questions/1379425/system-has-not-been-booted-with-systemd-as-init-system-pid-1-cant-operate

PS C:\Users\psalm\Downloads> Add-AppxPackage .\Microsoft.WSL_1.2.5.0_x64_ARM64.msixbundle                          PS C:\Users\psalm\Downloads> wsl --version
WSL version: 1.2.5.0
Kernel version: 5.15.90.1
WSLg version: 1.0.51
MSRDC version: 1.2.3770
Direct3D version: 1.608.2-61064218
DXCore version: 10.0.25131.1002-220531-1700.rs-onecore-base2-hyp
Windows version: 10.0.19044.2846

-> Solution: It is not necessary to install mariadb because the laravel package usng dockker includes the required myseql dependencies

-----

Conneting to database using the command line (see https://www.digitalocean.com/community/tutorials/how-to-install-mariadb-on-ubuntu-22-04):

$ sudo mariadb

MariaDB [(none)]> GRANT ALL ON *.* TO 'admin'@'localhost' IDENTIFIED BY 'password' WITH GRANT OPTION;

rmoore@Grieg:~/DevProjects/first-app$ sudo systemctl status mariadb
● mariadb.service - MariaDB 10.6.12 database server
     Loaded: loaded (/lib/systemd/system/mariadb.service; enabled; vendor preset: enabled)
     Active: active (running) since Tue 2023-05-09 07:29:35 MDT; 1 day 12h ago
       Docs: man:mariadbd(8)
             https://mariadb.com/kb/en/library/systemd/
   Main PID: 315 (mariadbd)
     Status: "Taking your SQL requests now..."
      Tasks: 9 (limit: 38417)
     Memory: 107.3M
     CGroup: /system.slice/mariadb.service
             └─315 /usr/sbin/mariadbd

May 09 07:29:35 Grieg systemd[1]: Started MariaDB 10.6.12 database server.
May 09 07:29:35 Grieg /etc/mysql/debian-start[408]: Upgrading MySQL tables if necessary.
May 09 07:29:35 Grieg /etc/mysql/debian-start[412]: Looking for 'mariadb' as: /usr/bin/mariadb
May 09 07:29:35 Grieg /etc/mysql/debian-start[412]: Looking for 'mariadb-check' as: /usr/bin/mariadb-check
May 09 07:29:35 Grieg /etc/mysql/debian-start[412]: This installation of MariaDB is already upgraded to 10.6.12-MariaDB.
May 09 07:29:35 Grieg /etc/mysql/debian-start[412]: There is no need to run mysql_upgrade again for 10.6.12-MariaDB.
May 09 07:29:35 Grieg /etc/mysql/debian-start[412]: You can use --force if you still want to run mysql_upgrade
May 09 07:29:35 Grieg /etc/mysql/debian-start[444]: Triggering myisam-recover for all MyISAM tables and aria-recover for all Aria tables
May 10 20:23:58 Grieg mariadbd[315]: 2023-05-10 20:23:58 31 [Warning] Access denied for user 'root'@'localhost'
May 10 20:24:05 Grieg mariadbd[315]: 2023-05-10 20:24:05 32 [Warning] Access denied for user 'root'@'localhost'

-----

rmoore@Grieg:~/DevProjects/first-app$ sudo mariadb
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 37
Server version: 10.6.12-MariaDB-0ubuntu0.22.04.1 Ubuntu 22.04

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| first_app          |
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.004 sec)

MariaDB [(none)]> USE first_app;
Database changed
MariaDB [first_app]> CREATE TABLE users(
    ->    `id` INT NOT NULL AUTO_INCREMENT,
    ->    `name` VARCHAR(100) NOT NULL,
    ->    `email` VARCHAR(100) NOT NULL,
    ->    PRIMARY KEY ( id )
    -> );
Query OK, 0 rows affected (0.030 sec)

MariaDB [first_app]> INSERT INTO users VALUE (1, "Shruti", "shruti@laravel.com");
Query OK, 1 row affected (0.016 sec)

MariaDB [first_app]> INSERT INTO users VALUE (2, "Roger", "roger@laravel.com");
Query OK, 1 row affected (0.004 sec)

MariaDB [first_app]> SELECT * FROM users;
+----+--------+--------------------+
| id | name   | email              |
+----+--------+--------------------+
|  1 | Shruti | shruti@laravel.com |
|  2 | Roger  | roger@laravel.com  |
+----+--------+--------------------+
2 rows in set (0.001 sec)

-----

Working with database:
See SelectDatabaseIcon.png

-----

VS Code Extensions: laravel-goto-controller, laravel-goto-view and "PHP Namespace Resolver"

-Now in our laravel application let`s execute some raw queries.  Go to the ~\routes\web.php file to notice this line:

Route::get('/', [WelcomeController::class, 'index']);

So navigate to ~\app\Http\Controllers\WelcomeController.php and update the code in 3 different ways:

1) Using raw SQL queries
2) Query Builder
3) Eloquent ORM

Right click on "DB" and choose "Import Class":

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class WelcomeController extends Controller
{
    public function index() {
        $users = DB::select("select * from users");
        dd($users)
    }
}

-Now if you open localhost and choose refresh you should see (after running migrations):




-Now let us fetch the users using the query builder:

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class WelcomeController extends Controller
{
    public function index() {
        //1) Using raw SQL queries
        //$users = DB::select("select * from users");
        //dd($users);
        //2) Query Builder
        $users = DB::table('users')->select(['name', 'email'])->whereNotNull('email')->orderBy('name')->get();
        dd($users);
        //3) Eloquent ORM        
    }
}


-----

        $users = DB::table('users')->select(['name', 'email'])->whereNotNull('email')->orderBy('name')->get();
        dd($users);

DbTableUserresults.png

Laravel 9.0 Essential Training: 2) Laravel Basics: Creating and running migrations: 
-Migrations can add and remove tables, acting like version control
-So drop the users table and re-create it using migrations
-First create a new migration:

rmoore@Grieg:~/DevProjects/first-app$ sail artisan make:migration create_students_table
...

-The migrations are located in ~\database\migrations where we manually added the 'name' and 'email' columns:

    public function up()
    {
        Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();          
            $table->timestamps();
        });        
    }

    
-Now to apply the database changes type:

rmoore@Grieg:~/DevProjects/first-app$ sail artisan migrate

   INFO  Preparing database.

  Creating migration table ............................................................................................................... 51ms DONE

   INFO  Running migrations.

  2014_10_12_000000_create_users_table ................................................................................................... 85ms DONE
  2014_10_12_100000_create_password_resets_table ......................................................................................... 97ms DONE
  2019_08_19_000000_create_failed_jobs_table ............................................................................................. 96ms DONE
  2019_12_14_000001_create_personal_access_tokens_table ................................................................................. 117ms DONE
  2023_05_11_031202_create_students_table ............

-----

SelectedFirst2RowsFromStudentsTable.png

See commit 

-----

Laravel 9.0 Essential Training: 2) Laravel Basics: Using Eloquent :
-Using the Eloquent Model we can:
1) Retrieve
2) Insert
3) Update
4) Delete

-Let us create a model first:

rmoore@Grieg:~/DevProjects/first-app$ sail artisan make:model Student
...

-This will create the file:

~\app\Models\Student.php

-This file should be created in~\app\Models\Student.php:

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Student extends Model
{
    use HasFactory;
}


-Make sure you add some data to your students table
-Now open web.php routes file:

<?php

namespace App\Http\Controllers;

use App\Model\Student;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class WelcomeController extends Controller
{
    public function index() {
        //1) Using raw SQL queries
        //$users = DB::select("select * from users");
        //dd($users);
        //2) Query Builder
        //$users = DB::table('users')->select(['name', 'email'])->whereNotNull('email')->orderBy('name')->get();
        //dd($users);
        //3) Eloquent ORM 
        $students = Student::all();    
        //dd($students);
        foreach($students as $student) {
            echo $student->name. "<br>";
        }
    }
}

Now open http://localhost to verify in our browser


Laravel 9.0 Essential Training: 3) Starting Your Project: Understanding project Requirements:
LiteNote: has links:
1) Log In
2) Register

-New user needs to register with Name, Email and Password
-Complete login flow
-Can create, edit or trash notes
-Create list, view, edit, move to trash, restore and delete forever

Laravel 9.0 Essential Training: 3) Starting Your Project: Setup a new project:
-Exit previous laravel application if it is still running
-Then stop it using "sail down"
-Use this commandm, 

$ curl -s https://laravel.build/litenotes | bash

-Open in Visual Studio code:

$ code .

-Check that it is running by executing "sail up" and opening http://localhost in a browser
-In "Table Plus" / DataGrip create a new connection like before

Name: Litenotes
Host: 127.0.0.1
User: sail
Password: password
Database: litenotes

-Now create the default tables using this command:

rmoore@Grieg:~/DevProjects/litenotes$ sail artisan migrate

   INFO  Preparing database.

  Creating migration table ............................................................................................................... 53ms DONE

   INFO  Running migrations.

  2014_10_12_000000_create_users_table ................................................................................................... 93ms DONE
  2014_10_12_100000_create_password_reset_tokens_table .................................................................................. 127ms DONE
  2019_08_19_000000_create_failed_jobs_table ............................................................................................. 95ms DONE
  2019_12_14_000001_create_personal_access_tokens_table ................................................................................. 131ms DONE
  

Laravel 9.0 Essential Training: 3) Starting Your Project: Add authentication with Laravel Breeze:
-Register
-Login
-Logout
-Password reset

-> Laravel has a starter kit that has the above functionality already: Breeze (basic) and Jetstream (advanced)
-You could also instead use "Laravel UI" for authentication that uses the bootstrap framework
-Install breeze using this command:

$ ./vendor/bin/sail composer require laravel/breeze --dev
...
$ ./vendor/bin/sail artisan breeze:install
...
$ npm install && npm run dev
...
npm WARN cleanup ]
npm notice
npm notice New minor version of npm available! 9.5.1 -> 9.6.6
npm notice Changelog: https://github.com/npm/cli/releases/tag/v9.6.6
npm notice Run npm install -g npm@9.6.6 to update!
npm notice
npm ERR! code EISDIR
npm ERR! syscall lstat
npm ERR! path \\wsl.localhost\Ubuntu-22.04\home\rmoore\DevProjects\litenotes\node_modules\.bin\cssesc
npm ERR! errno -4068
npm ERR! EISDIR: illegal operation on a directory, lstat '\\wsl.localhost\Ubuntu-22.04\home\rmoore\DevProjects\litenotes\node_modules\.bin\cssesc'

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\psalm\AppData\Local\npm-cache\_logs\2023-05-14T05_38_21_784Z-debug-0.log

-> Solution: Ran as root 

-----

npm WARN EBADENGINE Unsupported engine {
npm WARN EBADENGINE   package: 'laravel-vite-plugin@0.7.6',
npm WARN EBADENGINE   required: { node: '>=14' },
npm WARN EBADENGINE   current: { node: 'v12.22.9', npm: '8.5.1' }
npm WARN EBADENGINE }
npm WARN EBADENGINE Unsupported engine {
npm WARN EBADENGINE   package: 'postcss-import@15.1.0',
npm WARN EBADENGINE   required: { node: '>=14.0.0' },
npm WARN EBADENGINE   current: { node: 'v12.22.9', npm: '8.5.1' }
npm WARN EBADENGINE }
npm WARN EBADENGINE Unsupported engine {
npm WARN EBADENGINE   package: 'postcss-load-config@4.0.1',
npm WARN EBADENGINE   required: { node: '>= 14' },
npm WARN EBADENGINE   current: { node: 'v12.22.9', npm: '8.5.1' }
npm WARN EBADENGINE }
npm WARN EBADENGINE Unsupported engine {
npm WARN EBADENGINE   package: 'rollup@3.21.7',
npm WARN EBADENGINE   required: { node: '>=14.18.0', npm: '>=8.0.0' },
npm WARN EBADENGINE   current: { node: 'v12.22.9', npm: '8.5.1' }
npm WARN EBADENGINE }
npm WARN EBADENGINE Unsupported engine {
npm WARN EBADENGINE   package: 'tailwindcss@3.3.2',
npm WARN EBADENGINE   required: { node: '>=14.0.0' },
npm WARN EBADENGINE   current: { node: 'v12.22.9', npm: '8.5.1' }
npm WARN EBADENGINE }
npm WARN EBADENGINE Unsupported engine {
npm WARN EBADENGINE   package: 'vite@4.3.6',
npm WARN EBADENGINE   required: { node: '^14.18.0 || >=16.0.0' },
npm WARN EBADENGINE   current: { node: 'v12.22.9', npm: '8.5.1' }
npm WARN EBADENGINE }
npm WARN EBADENGINE Unsupported engine {
npm WARN EBADENGINE   package: 'yaml@2.2.2',
npm WARN EBADENGINE   required: { node: '>= 14' },
npm WARN EBADENGINE   current: { node: 'v12.22.9', npm: '8.5.1' }
npm WARN EBADENGINE }

-> Solution: Updated to nodejs v14.21 (see https://computingforgeeks.com/install-node-js-14-on-ubuntu-debian-linux/):

$ curl -sL https://deb.nodesource.com/setup_14.x | sudo bash -
...
$ sudo apt -y install nodejs
...
$ node  -v
v14.21.1

-To view application: 

http://localhost:5174/

Laravel 9.0 Essential Training: 3) Starting Your Project: 



